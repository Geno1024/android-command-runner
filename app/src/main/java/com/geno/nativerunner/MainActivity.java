package com.geno.nativerunner;

import android.app.*;
import android.graphics.Color;
import android.graphics.drawable.GradientDrawable;
import android.os.Bundle;
import android.view.*;
import android.widget.*;
import android.content.*;
import android.view.View.*;

public class MainActivity extends Activity 
{
	public LinearLayout internal, busybox, external;
	public String[] internalCommands, busyboxCommands, externalCommands;
	@Override
	protected void onCreate(Bundle savedInstanceState)
	{
        super.onCreate(savedInstanceState);
		ScrollView totalContent = new ScrollView(this);
		LinearLayout total = new LinearLayout(this);
		internal = new LinearLayout(this);
		busybox = new LinearLayout(this);
		external = new LinearLayout(this);
		total.setOrientation(LinearLayout.VERTICAL);
		internal.setOrientation(LinearLayout.VERTICAL);
		busybox.setOrientation(LinearLayout.VERTICAL);
		external.setOrientation(LinearLayout.VERTICAL);
		TextView internalD = new TextView(this);
		TextView busyboxD = new TextView(this);
		TextView externalD = new TextView(this);
		internalD.setText("Internal");
		busyboxD.setText("Busybox");
		externalD.setText("External");
		internalD.setTextSize(20);
		busyboxD.setTextSize(20);
		externalD.setTextSize(20);
		internalD.setGravity(Gravity.CENTER);
		busyboxD.setGravity(Gravity.CENTER);
		externalD.setGravity(Gravity.CENTER);
		internal.addView(internalD, LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.WRAP_CONTENT);
		busybox.addView(busyboxD, LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.WRAP_CONTENT);
		external.addView(externalD, LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.WRAP_CONTENT);
		total.addView(internal, LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.WRAP_CONTENT);
		total.addView(busybox, LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.WRAP_CONTENT);
		total.addView(external, LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.WRAP_CONTENT);
		totalContent.addView(total);
		setContentView(totalContent);
		internalCommands = new String[]
				{
						"acpi",
						"applypatch",
						"appops",
						"appwidget",
						"atrace",
						"basename",
						"blockdev",
						"bmgr",
						"brctl",
						"btnvtool",
						"bzcat",
						"cal",
						"cat",
						"chcon",
						"chgrp",
						"chmod",
						"chown",
						"chroot",
						"cksum",
						"clear",
						"cmp",
						"comm",
						"content",
						"cp",
						"cpio",
						"cplay",
						"curl",
						"cut",
						"dalvikvm",
						"date",
						"df",
						"dirname",
						"dmesg",
						"dos2unix",
						"dpm",
						"du",
						"dumpe2fs",
						"dumpsys",
						"ebtables",
						"echo",
						"efsks",
						"expand",
						"expr",
						"fallocate",
						"false",
						"fmconfig", // Useful for an interactive command?
						"free",
						"ftmdaemon",
						"getenforce",
						"getevent",
						"getprop",
						"groups",
						"head",
						"hid",
						"hostname",
						"id",
						"ifconfig",
						"iftop",
						"ime",
						"inotifyd",
						"input",
						"insmod", // This should be rewrite.
						"ioctl",
						"ionice",
						"ip",
						"ifconfig",
						"ip6tables",
						"iptables",
						"kill",
						"ld_mc",
						"ln",
						"load_policy",
						"log",
						"logcat",
						"logname",
						"logwrapper",
						"losetup",
						"ls",
						"lsof",
						"lsusb",
						"make_ext4fs",
						"make_f2fs",
						"md5sum",
						"media",
						"mkdir",
						"mke2fs",
						"mknod",
						"mkswap",
						"mktemp",
						"mm_qjpeg_dec_test",
						"mm_qjpeg_enc_test",
					//	"mm_vdec_omx_test",
						"modinfo",
						"more",
						"mount",
						"mountpoint",
						"mv",
						"n_smux",
						"nandread",
						"netstat",
						"newfs_msdos",
						"nice",
						"nl",
						"nohup",
						"od",
						"paste",
						"patch",
						"patchoat",
						"perfd",
						"pgrep",
						"pidof",
						"ping",
						"ping6",
						"pkill",
						"pmap",
						"printenv",
						"printf",
						"prlimit",
						"ps",
						"pwd",
						"qcks",
						"readlink",
						"realpath",
						"reboot",
						"renice",
						"requestsync",
						"restorecon",
						"rm",
						"rmdir",
						"rmnetcli",
						"route",
						"run_as",
						"runcon",
						"schedtest",
						"screencap",
						"screenrecord",
						"secdiscard",
						"sed",
						"sensorservice",
						"seq",
						"service",
						"setenforce",
						"setprop",
						"setsid",
						"settings",
						"setup_fs",
						"sh",
						"sha1sum",
						"sleep",
						"sm",
						"sort",
						"split",
						"start",
						"stat",
						"stop",
						"strings",
						"uname",
						"yes",
				};
		busyboxCommands = new String[]
				{
						"acpid",
						"adjtimex",
						"ar",
						"arp",
						"arping",
						"ash",
						"awk",
						"base64",
						"basename",
						"bbconfig",
						"beep",
						"blkid",
						"blockdev",
						"bootchartd",
						"brctl",
						"bunzip2",
						"bzcat",
						"bzip2",
						"cal",
						"cat",
						"catv",
						"chat",
						"chattr",
						"chgrp",
						"chmod",
						"chown",
						"chpst",
						"chroot",
						"chrt",
						"chvt",
						"cksum",
						"clear",
						"cmp",
						"comm",
						"cp",
						"cpio",
						"crond",
						"crontab",
						"cttyhack",
						"cut",
						"date",
						"dc",
						"dd",
						"deallocvt",
						"depmod",
						"devmem",
						"df",
						"dhcprelay",
						"diff",
						"dirname",
						"dmesg",
						"dnsd",
						"dnsdomainname",
						"dos2unix",
						"dpkg",
						"dpkg-deb",
						"du",
						"dumpkmap",
						"dumpleases",
						"echo",
						"ed",
						"egrep",
						"env",
						"envdir",
						"envuidgid",
						"ether-wake",
						"expand",
						"expr",
						"fakeidentd",
						"false",
						"fbset",
						"fbsplash",
						"fdflush",
						"fdformat",
						"fdisk",
						"fgconsole",
						"fgrep",
						"find",
						"findfs",
						"flash_lock",
						"flash_unlock",
						"flashcp",
						"flock",
						"fold",
						"free",
						"freeramdisk",
						"fsck",
						"fsck.minix",
						"fsync",
						"ftpd",
						"ftpget",
						"ftpput",
						"fuser",
						"getopt",
						"grep",
						"groups",
						"gunzip",
						"gzip",
						"halt",
						"hd",
						"hdparm",
						"head",
						"hexdump",
						"hostname",
						"httpd",
						"hush",
						"hwclock",
						"id",
						"ifconfig",
						"ifdown",
						"ifup",
						"inetd",
						"init",
						"inotifyd",
						"insmod",
						"install",
						"ionice",
						"iostat",
						"ip",
						"ipaddr",
						"ipcalc",
						"ipcrm",
						"ipcs",
						"iplink",
						"iproute",
						"iprule",
						"iptunnel",
						"kbd_mode",
						"kill",
						"killall",
						"killall5",
						"klogd",
						"less",
						"linuxrc",
						"ln",
						"loadkmap",
						"logread",
						"losetup",
						"lpd",
						"lpq",
						"lpr",
						"ls",
						"lsattr",
						"lsmod",
						"lsof",
						"lspci",
						"lsusb",
						"lzcat",
						"lzma",
						"lzop",
						"lzopcat",
						"makedevs",
						"makemime",
						"man",
						"md5sum",
						"mdev",
						"mesg",
						"microcom",
						"mkdir",
						"mkdosfs",
						"mke2fs",
						"mkfifo",
						"mkfs.ext2",
						"mkfs.minix",
						"mkfs.reiser",
						"mkfs.vfat",
						"mknod",
						"mkswap",
						"mktemp",
						"modinfo",
						"modprobe",
						"more",
						"mount",
						"mountpoint",
						"mpstat",
						"mv",
						"nameif",
						"nanddump",
						"nandwrite",
						"nbd-client",
						"nc",
						"netstat",
						"nice",
						"nmeter",
						"nohup",
						"nslookup",
						"od",
						"openvt",
						"patch",
						"pgrep",
						"pidof",
						"ping",
						"ping6",
						"pipe_progress",
						"pivot_root",
						"pkill",
						"pmap",
						"popmaildir",
						"poweroff",
						"powertop",
						"printenv",
						"printf",
						"ps",
						"pscan",
						"pstree",
						"pwd",
						"pwdx",
						"raidautorun",
						"rdate",
						"rdev",
						"readlink",
						"readprofile",
						"realpath",
						"reboot",
						"reformime",
						"renice",
						"reset",
						"resize",
						"rev",
						"rm",
						"rmdir",
						"rmmod",
						"route",
						"rpm",
						"rpm2cpio",
						"rtcwake",
						"run-parts",
						"runsv",
						"runsvdir",
						"rx",
						"script",
						"scriptreplay",
						"sed",
						"sendmail",
						"seq",
						"setconsole",
						"setkeycodes",
						"setlogcons",
						"setserial",
						"setsid",
						"setuidgid",
						"sh",
						"sha1sum",
						"sha256sum",
						"sha512sum",
						"showkey",
						"slattach",
						"sleep",
						"smemcap",
						"softlimit",
						"sort",
						"split",
						"start-stop-daemon",
						"stat",
						"strings",
						"stty",
						"sum",
						"sv",
						"svlogd",
						"swapoff",
						"swapon",
						"switch_root",
						"sync",
						"sysctl",
						"syslogd",
						"tac",
						"tail",
						"tar",
						"tcpsvd",
						"tee",
						"telnet",
						"telnetd",
						"test",
						"tftp",
						"tftpd",
						"time",
						"timeout",
						"top",
						"touch",
						"tr",
						"traceroute",
						"traceroute6",
						"true",
						"tty",
						"ttysize",
						"tunctl",
						"tune2fs",
						"ubiattach",
						"ubidetach",
						"ubimkvol",
						"ubirmvol",
						"ubirsvol",
						"ubiupdatevol",
						"udhcpc",
						"udhcpd",
						"udpsvd",
						"umount",
						"uname",
						"uncompress",
						"unexpand",
						"uniq",
						"unix2dos",
						"unlzma",
						"unlzop",
						"unxz",
						"unzip",
						"uptime",
						"usleep",
						"uudecode",
						"uuencode",
						"vconfig",
						"vi",
						"volname",
						"watch",
						"watchdog",
						"wc",
						"wget",
						"which",
						"whoami",
						"whois",
						"xargs",
						"xz",
						"xzcat",
						"yes",
						"zcat",
						"zcip",
				};
		externalCommands = new String[]
				{

				};
		addCommands(internal, internalCommands);
		addCommands(busybox, busyboxCommands);
		addCommands(external, externalCommands);
	}

	public void addCommands(final ViewGroup toAdd, final String[] commands)
	{
		for (String command : commands)
			addCommand(toAdd, command);
	}
	
	public void addCommand(final ViewGroup toAdd, final String command)
	{
		final Button b = new Button(this);
		try {b.setText(command + ": " + ((Command) Class.forName("com.geno.nativerunner.CommandBox").getField(command.toUpperCase()).get("")).getParams().length);}
		catch (Exception e){b.setText(command);}
		b.setAllCaps(false);
		b.setOnClickListener(new OnClickListener()
			{
				@Override
				public void onClick(View p1)
				{
					String cmdclazz;
					if (toAdd == busybox) cmdclazz = "busybox ";
					else cmdclazz = "";
					startActivity(new Intent(MainActivity.this, CommandActivity.class).putExtra("command", cmdclazz + command));
				}
			});
		b.setWidth(ViewGroup.LayoutParams.MATCH_PARENT);
		toAdd.addView(b);
	}
}
